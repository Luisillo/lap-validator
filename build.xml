<!--    



    build.xml
    Autor: 
    Fecha: Octubre, 2004

    Universidad Autónoma de Guadalajara.

    Script para la construcción de aplicaciones web
    basadas en el servidor Tomcat e Hibernate.

    This build script assumes that the source code of your web application
    is organized into the following subdirectories underneath the source
    code directory from which you execute the build script:

        docs    Static documentation files to be copied to
                the "docs" subdirectory of your distribution.

        src     Java source code (and associated resource files)
                to be compiled to the "WEB-INF/classes"
                subdirectory of your web applicaiton.

        web     Static HTML, JSP, and other content (such as
                image files), including the WEB-INF subdirectory
                and its configuration file contents.
-->


<!--
    A "project" describes a set of targets that may be requested
    when Ant is executed.  The "default" attribute defines the
    target which is executed if no specific target is requested,
    and the "basedir" attribute defines the current working directory
    from which Ant executes the requested task.  This is normally
    set to the current working directory.
-->

<project name="lap" default="build" basedir=".">


<!-- ===================== Property Definitions ====================== -->
<!--
    Each of the following properties are used in the build script.
    Values for these properties are set by the first place they are
    defined, from the following list:

    - Definitions on the "ant" command line (ant -Dfoo=bar compile).

    - Definitions from a "build.properties" file in the top level
      source directory of this application.

    - Definitions from a "build.properties" file in the developer's
      home directory.

    - Default definitions in this build.xml file.

    You will note below that property values can be composed based on the
    contents of previously defined properties.  This is a powerful technique
    that helps you minimize the number of changes required when your
    development environment is modified.  Note that property composition
    is allowed within "build.properties" files as well as in the
    "build.xml" script.
-->

    <property file="build.properties"/>
    <property file="${user.home}/build.properties"/>



<!-- ==================== File and Directory Names =================== -->
<!--
    These properties generally define file and directory names (or paths)
    that affect where the build process stores its outputs.

    - app.name           Base name of this application, used to
                         construct filenames and directories.

    - app.version        Version number of this iteration of the application.

    - app.path           Context path to which this application should be
                         deployed (defaults to "/" plus the value of the
                         "app.name" property).

    - build.home         The directory into which the "prepare" and
                         "compile" targets will generate their output.
                         Defaults to "build".

    - dist.home          The name of the base directory in which
                         distribution files are created.
                         Defaults to "dist".

    - catalina.home      The directory in which you have installed
                         a binary distribution of Tomcat 4. This will
                         be used by the "deploy" target.

    - manager.url        The URL of the "/manager" web application on the
                         Tomcat installation to which we will deploy web
                         applications and web services.

    - manager.username   The login username of a user that is assigned the
                         "manager" role (so that he or she can execute
                         commands via the "/manager" web application)

    - manager.password   The login password of a user that is assigned the
                         "manager" role (so that he or she can execute
                         commands via the "/manager" web application)
-->

    <property name="app.name"        value="lap"/>
    <property name="app.version"     value="0.1"/>
    <property name="app.path"        value="/${app.name}"/>

    <property name="src.home"        value="${basedir}/src"/>
    <property name="web.home"        value="${basedir}/web"/>
    <property name="docs.home"       value="${basedir}/docs"/>
    <property name="build.home"      value="${basedir}/build"/>
    <property name="classes.home"    value="${basedir}/build/WEB-INF/classes"/>    
    <property name="lib.home"        value="${basedir}/build/WEB-INF/lib"/>    
    <property name="dist.home"       value="${basedir}/dist"/>
    <property name="test.out.dir"    value="${basedir}/testout"/>

    <property name="catalina.home"    value="C:\apache-tomcat-7.0.57"/>
    <property name="manager.url"      value="http://127.0.0.1:8080/manager/text"/>
    <property name="manager.username" value="tomcat"/>
    <property name="manager.password" value="123"/>



<!-- ================== Custom Ant Task Definitions ================== -->
<!--
    These properties define custom tasks for the Ant build tool that
    interact with the "/manager" web application installed with Tomcat 4.
    Before they can be successfully utilized, you must perform the
    following steps:

    - Copy the file "server/lib/catalina-ant.jar" from your Tomcat 4
      installation into the "lib" directory of your Ant installation.

    - Create a "build.properties" file in your application's top-level
      source directory (or your user login home directory) that defines
      appropriate values for the "manager.password", "manager.url", and
      "manager.username" properties described above.

    For more information about the Manager web application, and the
    functionality of these tasks, see
    <http://localhost:8080/tomcat-docs/manager-howto.html>.
-->
<path id="tomcat.ant.classpath">
    <fileset dir="${catalina.home}/lib">
           <include name="catalina-ant.jar"/>
           <include name="tomcat-coyote.jar"/>
           <include name="tomcat-util.jar"/>
        </fileset>
    <fileset dir="${catalina.home}/bin">
               <include name="tomcat-juli.jar"/>
    </fileset>
</path>
<!--
<path id="tomcat.ant.classpath">
             <pathelement 
location="${catalina.home}/lib/catalina-ant.jar" />
         </path>
-->
    <taskdef name="install" classname="org.apache.catalina.ant.DeployTask"
		classpathref="tomcat.ant.classpath" />
    <taskdef name="list"    classname="org.apache.catalina.ant.ListTask"
		classpathref="tomcat.ant.classpath" />
    <taskdef name="reload"  classname="org.apache.catalina.ant.ReloadTask"
		classpathref="tomcat.ant.classpath" />
    <taskdef name="remove"  classname="org.apache.catalina.ant.UndeployTask"
		classpathref="tomcat.ant.classpath" />


<!--  ==================== Compilation Control Options =============== -->
<!--
    These properties control option settings on the Javac compiler when
    it is invoked using the <javac> task.

    - compile.debug        Should compilation include the debug option?

    - compile.deprecation  Should compilation include the deprecation option?

    - compile.optimize     Should compilation include the optimize option?
-->

    <property name="compile.debug"       value="true"/>
    <property name="compile.deprecation" value="false"/>
    <property name="compile.optimize"    value="true"/>


<!-- ==================== External Dependencies ====================== -->
<!--
    Use property values to define the locations of external JAR files
    on which your application will depend.  In general, these values
    will be used for two purposes:

    - Inclusion on the classpath that is passed to the Javac compiler

    - Being copied into the "/WEB-INF/lib" directory during execution
      of the "deploy" target.

    Because we will automatically include all of the Java classes that
    Tomcat 4 exposes to web applications, we will not need to explicitly
    list any of those dependencies.  You only need to worry about external
    dependencies for JAR files that you are going to include inside
    your "/WEB-INF/lib" directory.
-->

<!-- Dummy external dependency -->
<!--
    <property name="foo.jar"
            value="/path/to/foo.jar"/>
-->


<!-- ==================== Compilation Classpath ====================== -->
<!--
    Rather than relying on the CLASSPATH environment variable, Ant includes
    features that makes it easy to dynamically construct the classpath you
    need for each compilation.  The example below constructs the compile
    classpath to include the servlet.jar file, as well as the other components
    that Tomcat makes available to web applications automatically, plus
    anything that you explicitly added.
-->

    <path id="compile.classpath">
        <!-- 
            Incluye todos los archivos JAR que estan incluidos 
            en /WEB-INF/lib 
        -->
        <fileset dir="${web.home}/WEB-INF/lib">
            <include name="*.jar"/>
        </fileset>


        <!-- 
            Incluye todos los elementos que Tomcat expone a 
            sus aplicaciones 
        -->
        <pathelement location="${catalina.home}/common/classes"/>
 <!-- 
        <fileset dir="${catalina.home}/common/endorsed">
            <include name="*.jar"/>
        </fileset>
   -->
        <fileset dir="${catalina.home}/lib">
            <include name="*.jar"/>
        </fileset>
        <!-- 
        <pathelement location="${catalina.home}/shared/classes"/>

        <fileset dir="${catalina.home}/shared/lib">
            <include name="*.jar"/>
        </fileset>


            Incluye todas las clases generadas del aplicación 
        -->
        <pathelement location="${classes.home}"/>


    </path>


<!-- ==================== echoproperties Target ====================== -->
<!--
    The "echoproperties" target is used to create the "src", "web"
    and "docs" destination directory.
-->

    <target name="echoproperties"
            description="Display script variables">

        <echoproperties />

    </target>


<!-- ==================== New Target ================================= -->
<!--
    The "new" target is used to create the "src", "web" and "docs"
    destination directory.
-->

    <target name="new"
            description="Create the 'src', 'web', and 'docs' destination
                    directory">

        <!-- Create build directories as needed -->
        <mkdir dir="${src.home}"/>
        <mkdir dir="${web.home}"/>
        <mkdir dir="${web.home}/images"/>
        <mkdir dir="${web.home}/WEB-INF"/>
        <mkdir dir="${web.home}/WEB-INF/classes"/>
        <mkdir dir="${web.home}/WEB-INF/lib"/>
        <mkdir dir="${docs.home}"/>

    </target>


<!-- ==================== Prepare Target ============================= -->
<!--
    The "prepare" target is used to create the "build" destination
    directory, and copy the static contents of your web application to
    it.  If you need to copy static files from external dependencies,
    you can customize the contents of this task.

    Normally, this task is executed indirectly when needed.
-->

    <target name="prepare"
            description="Create the 'build' destination directory,
                    and copy the static contents of your web
                    application to it">

        <!-- Create build directories as needed -->
        <mkdir  dir="${build.home}"/>
        <mkdir  dir="${build.home}/WEB-INF"/>
        <mkdir  dir="${build.home}/WEB-INF/classes"/>

        <!-- Copy static content of this web application -->
        <copy todir="${build.home}">
            <fileset dir="${web.home}"/>
        </copy>

        <!-- Copy external dependencies as required -->
        <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
        <mkdir  dir="${build.home}/WEB-INF/lib"/>
<!--
        <copy todir="${build.home}/WEB-INF/lib" file="${foo.jar}"/>
-->

        <!-- Copy static files from external dependencies as needed -->
        <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->

    </target>


<!-- ==================== Build Target =============================== -->
<!--
    The "build" target transforms source files (from your "src" directory)
    into object files in the appropriate location in the build directory.
    This example assumes that you will be including your classes in an
    unpacked directory hierarchy under "/WEB-INF/classes".
-->

    <target name="build" depends="prepare"
            description="Compile Java sources">

        <!-- Compile Java classes as necessary -->
        <mkdir    dir="${build.home}/WEB-INF/classes"/>
        <javac srcdir="${src.home}"
                destdir="${build.home}/WEB-INF/classes"
                debug="${compile.debug}"
                deprecation="${compile.deprecation}"
                optimize="${compile.optimize}">
            <classpath refid="compile.classpath"/>
        </javac>

        <!-- Copy application resources -->
        <copy  todir="${build.home}/WEB-INF/classes">
            <fileset dir="${src.home}" excludes="**/*.java"/>
        </copy>

    </target>


<!-- ==================== Javadoc Target ============================= -->
<!--
    The "javadoc" target creates Javadoc API documentation for the Java
    classes included in your application.  Normally, this is only required
    when preparing a distribution release, but is available as a separate
    target in case the developer wants to create Javadocs independently.
-->

    <target name="javadoc" depends="build"
            description="Create Javadoc API documentation">

        <mkdir          dir="${docs.home}/api"/>
        <javadoc sourcepath="${src.home}"
                destdir="${docs.home}/api"
                packagenames="*">
            <classpath refid="compile.classpath"/>
        </javadoc>

    </target>


<!-- ==================== Dist Target ================================ -->
<!--
    The "dist" target creates a binary distribution of your application
    in a directory structure ready to be archived in a tar.gz or zip file.
    Note that this target depends on two others:

    - "compile" so that the entire web application (including external
      dependencies) will have been assembled

    - "javadoc" so that the application Javadocs will have been created
-->

    <target name="dist" depends="build,javadoc"
            description="Create binary distribution">

        <!-- Copy documentation subdirectories -->
        <mkdir dir="${dist.home}/docs"/>
        <copy todir="${dist.home}/docs">
            <fileset dir="${docs.home}"/>
        </copy>

        <!-- Create application JAR file -->
        <jar jarfile="${dist.home}/${app.name}v${app.version}.war"
                basedir="${build.home}"/>

        <!-- Copy additional files to ${dist.home} as necessary -->

    </target>


<!-- ==================== Clean Target ============================== -->
<!--
    The "clean" target deletes any previous "build" and "dist" directory,
    so that you can be ensured the application can be built from scratch.
-->

    <target name="clean"
            description="Delete old build and dist directories">

        <delete dir="${build.home}"/>
        <delete dir="${dist.home}"/>

    </target>


<!-- ==================== All Target ================================= -->
<!--
    The "all" target is a shortcut for running the "clean" target followed
    by the "compile" target, to force a complete recompile.
-->

    <target name="all" depends="clean,build,javadoc"
            description="Clean build and dist directories, then compile">
    </target>


<!-- ====================== List Target ============================== -->
<!--
    The "list" target asks the specified Tomcat 4 installation to list the
    currently running web applications, either loaded at startup time or
    installed dynamically.  It is useful to determine whether or not the
    application you are currently developing has been installed.
-->

    <target name="list"
            description="List installed applications on servlet container">

        <list url="${manager.url}"
                username="${manager.username}"
                password="${manager.password}"/>

    </target>


<!-- ==================== Install Target ============================= -->
<!--
    The "install" target tells the specified Tomcat 4 installation to
    dynamically install this web application and make it available for
    execution.  It does *not* cause the existence of this web application
    to be remembered across Tomcat restarts; if you restart the server,
    you will need to re-install all this web application.

    If you have already installed this application, and simply want Tomcat
    to recognize that you have updated Java classes (or the web.xml file),
    use the "reload" target instead.

    NOTE:  This target will only succeed if it is run from the same server
    that Tomcat is running on.

    NOTE:  This is the logical opposite of the "remove" target.
	
	
	war="file:${build.home}"/>
-->

    <target name="install" depends="build"
            description="Install application to servlet container">

        <install url="${manager.url}"
                username="${manager.username}"
                password="${manager.password}"
                path="${app.path}"
				LocalWar="file://${dist.home}/${app.name}v${app.version}.war"/>  
    </target>
	<!--war="file:${dist.home}/${app.name}v${app.version}.war"/> quite esto y puse linea localWar-->

<!-- ==================== Reload Target ============================== -->
<!--
    The "reload" target tells the specified Tomcat 4 installation to
    dynamically reload this web application, to reflect changes in the
    underlying classes or the "web.xml" deployment descriptor.
-->

    <target name="reload" depends="build"
            description="Reload application on servlet container">

        <reload url="${manager.url}"
                username="${manager.username}"
                password="${manager.password}"
                path="${app.path}"/>

    </target>


<!-- ==================== Remove Target ============================== -->
<!--
    The "remove" target tells the specified Tomcat 4 installation to
    dynamically remove this web application from service.

    NOTE:  This is the logical opposite of the "install" target.
-->

    <target name="remove"
            description="Remove application on servlet container">

        <remove url="${manager.url}"
                username="${manager.username}"
                password="${manager.password}"
                path="${app.path}"/>

    </target>


<!-- ==================== Esquema Target ============================== -->
  <target name="db" 
          description="Ejecuta el administrador gráfico de HSQLDB" >

      <java classname="org.hsqldb.util.DatabaseManager"
            fork="yes">
         <classpath refid="compile.classpath"/>
         <arg value="-driver"/>
         <arg value="org.hsqldb.jdbcDriver"/>
         <arg value="-url"/>
         <arg value="jdbc:hsqldb:data/bdscec"/>
         <arg value="-user"/>
         <arg value="sa"/>
      </java>

  </target>


  <target name="hbm2java"
          description="Genera código Java desde los archivos de mapeo">

      <taskdef name="hbm2java"
           classname="org.hibernate.tool.hbm2java.Hbm2JavaTask"
           classpathref="compile.classpath"/>

      <hbm2java output="${src.home}/gen">
          <fileset dir="${src.home}">
              <include name="**/*.hbm.xml"/>
          </fileset>
      </hbm2java>

  </target>

  <target name="esquema" 
          depends="build"
          description="Genera el esquema de la base de datos desde los archivos de mapeo">

    <taskdef name="schemaexport"
             classname="org.hibernate.tool.hbm2ddl.SchemaExportTask"
             classpathref="compile.classpath"/>

    <schemaexport config="${classes.home}/hibernate.cfg.xml"
                  drop="no"
                  delimiter=";"
                  output="esquema.sql"
                  quiet="no" 
                  text="no" >
    </schemaexport>

  </target>


    <target name="junit" 
           description="Ejecuta la suite de pruebas">

        <mkdir dir="${test.out.dir}"/>
 
       <junit printsummary="yes" fork="no" haltonfailure="yes">
            <classpath>
                <fileset dir="${lib.home}">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement path="${classes.home}"/>
            </classpath>
            <formatter type="plain"/>
            <formatter type="xml"/>
            <test name="edu.uag.iidis.scec.pruebas.AllTests" 
                  todir="${test.out.dir}" 
                  haltonfailure="no"/>
        </junit>

    </target>


    <target name="junitreport" 
           depends="junit" 
           description="Ejecuta pruebas y crea reporte">

        <junitreport todir="${test.out.dir}">
            <fileset dir="${test.out.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" 
                    todir="${test.out.dir}"/>
        </junitreport>

    </target>

    <target name="alltests" 
          description="Crea y persiste algunos datos">

        <java classname="edu.uag.iidis.scec.pruebas.AllTests" fork="true">
            <classpath>
                <fileset dir="${lib.home}">
                    <include name="**/*.jar"/>
                </fileset>
                <pathelement path="${classes.home}"/>
            </classpath>
       </java>
  </target>

</project>
